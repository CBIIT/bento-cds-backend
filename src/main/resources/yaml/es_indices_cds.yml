# Indices settings
Indices:
# Subjects index
  - index_name: subjects
    type: neo4j
    # type mapping for each property of the index
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      image_modality:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      sample_types:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Global Search properties
      site_gs:
        type: search_as_you_type
      study_gs:
        type: search_as_you_type
      subject_id_gs:
        type: search_as_you_type
      gender_gs:
        type: search_as_you_type
      # Overview properties
      files:
        type: keyword
      samples:
        type: keyword
      subject_ids:
        type: keyword
      ethnicity:
        type: keyword
      race:
        type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)<--(p:participant)
      WITH s, 
        {
          accesses: s.study_access,
          acl: s.acl,
          phs_accession: s.phs_accession,
          studies: s.study_name,
          study_data_types: s.study_data_types,
          number_of_study_participants: count(distinct p)
        } AS opensearch_data
      WITH s,
        apoc.map.merge(opensearch_data, {
          study_gs: opensearch_data.studies
        }) AS opensearch_data
      OPTIONAL MATCH (s)<--(:participant)<--(samp:sample)
      WITH s, 
        apoc.map.merge(opensearch_data, {
          number_of_study_samples: count(distinct samp)
        }) AS opensearch_data
      MATCH (s)<--(p:participant)
      WITH p, \"Not specified in data\" AS na, opensearch_data
      WITH p, na,
        apoc.map.merge(opensearch_data, {
          genders: p.gender,
          ethnicity: COALESCE(p.ethnicity, na),
          race: COALESCE(p.race, na),
          subject_ids: p.participant_id
        }) AS opensearch_data
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          gender_gs: opensearch_data.genders,
          subject_id_gs: opensearch_data.subject_ids
        }) AS opensearch_data
      OPTIONAL MATCH (p)<--(samp:sample)
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          is_tumor: apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_tumor_status, na))),
          samples: apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_id, na))),
          sample_types: apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_type, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (p)<--(:sample)<--(f:file)
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          experimental_strategies: apoc.coll.sort(apoc.coll.toSet(apoc.coll.flatten(COLLECT (apoc.text.split(f.experimental_strategy_and_data_subtypes,\"[;,]\\s{0,1}\")), true))),
          file_types: apoc.coll.sort(COLLECT(DISTINCT COALESCE(f.file_type, na))),
          files: apoc.coll.sort(COLLECT(DISTINCT COALESCE(f.file_id, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (p)<--(diag:diagnosis)
      WITH p, na, opensearch_data,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_site, na))) AS primary_site,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_diagnosis, na))) AS primary_diagnosis
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          primary_diagnoses: primary_diagnosis,
          site: primary_site,
          site_gs: primary_site
        }) AS opensearch_data
      OPTIONAL MATCH (p)<--(:sample)<--(:file)<--(g:genomic_info)
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          library_layouts: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_layout, na))),
          library_selections: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_selection, na))),
          library_sources: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_source, na))), 
          library_strategies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_strategy, na))),
          instrument_models: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.instrument_model, na))),
          platforms: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.platform, na))),
          reference_genome_assemblies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.reference_genome_assembly, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (p)<--(:sample)<--(:file)<--(i:image)
      WITH p, na, 
        apoc.map.merge(opensearch_data, {
          image_modality: apoc.coll.sort(COLLECT(DISTINCT COALESCE(i.image_modality, na)))
        }) AS opensearch_data
      RETURN opensearch_data
      ORDER BY opensearch_data.subject_ids
      "
# Samples index
  - index_name: samples
    type: neo4j
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      image_modality:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      sample_types:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Global search properties
      sample_id_gs:
        type: search_as_you_type
      is_tumor_gs:
        type: search_as_you_type
      analyte_type_gs:
        type: search_as_you_type
      # Overview properties
      analyte_type:
        type: keyword
      files:
        type: keyword
      sample_id:
        type: keyword
      sample_ids:
        type: keyword
      subject_ids:
        type: keyword
      organ_or_tissue:
        type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)<--(p:participant)
      WITH s, p, s.study_name AS study_name
      WITH s, 
        {
          accesses: s.study_access,
          acl: s.acl,
          phs_accession: s.phs_accession,
          studies: study_name,
          study_data_types: s.study_data_types,
          number_of_study_participants: count(distinct p)
        } AS opensearch_data
      MATCH (s)<--(:participant)<--(samp:sample)
      WITH s, 
        apoc.map.merge(opensearch_data, {
          number_of_study_samples: count(distinct samp)
        }) AS opensearch_data
      MATCH (s)<--(:participant)<--(samp:sample)
      WITH samp, 
        \"Not specified in data\" AS na, 
        apoc.map.merge(opensearch_data, {
          is_tumor: samp.sample_tumor_status,
          analyte_type: samp.sample_type,
          sample_types: samp.sample_type,
          sample_id: samp.sample_id,
          sample_ids: samp.sample_id
        }) AS opensearch_data
      WITH samp, na, 
      apoc.map.merge(opensearch_data, {
          is_tumor_gs: opensearch_data.is_tumor,
          analyte_type_gs: opensearch_data.analyte_type,
          sample_id_gs: opensearch_data.sample_id
        }) AS opensearch_data
      OPTIONAL MATCH (samp)-->(p:participant)
      WITH samp, na, 
        apoc.map.merge(opensearch_data, {
          genders: p.gender,
          subject_ids: p.participant_id
        }) AS opensearch_data
      OPTIONAL MATCH (samp)<--(f:file)
      WITH samp, na, 
        apoc.map.merge(opensearch_data, {
          experimental_strategies: apoc.coll.sort(apoc.coll.toSet(apoc.coll.flatten(COLLECT (apoc.text.split(f.experimental_strategy_and_data_subtypes,\"[;,]\\s{0,1}\")), true))),
          file_types: apoc.coll.sort(COLLECT(DISTINCT COALESCE(f.file_type, na))),
          files: apoc.coll.sort(COLLECT(DISTINCT COALESCE(f.file_id, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (samp)<--(:file)<--(g:genomic_info)
      WITH samp, na, 
        apoc.map.merge(opensearch_data, {
          library_layouts: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_layout, na))), 
          library_selections: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_selection, na))), 
          library_sources: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_source, na))), 
          library_strategies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_strategy, na))),
          instrument_models: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.instrument_model, na))),
          platforms: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.platform, na))),
          reference_genome_assemblies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.reference_genome_assembly, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (samp)-->(:participant)<--(diag:diagnosis)
      WITH samp, na, 
        apoc.map.merge(opensearch_data, {
          primary_diagnoses: apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_diagnosis, na))),
          site: apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_site, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (samp)<--(:file)<--(i:image)
      WITH samp, na, 
        apoc.map.merge(opensearch_data, {
          image_modality: apoc.coll.sort(COLLECT(DISTINCT COALESCE(i.image_modality, na))),
          organ_or_tissue: apoc.coll.sort(COLLECT(DISTINCT COALESCE(i.organ_or_tissue, na)))
        }) AS opensearch_data
      RETURN opensearch_data
      ORDER BY opensearch_data.sample_id
    "
# Files index (split by experimental strategies)
  - index_name: file_experimental_strategies
    type: neo4j
    mapping:
      file_id:
        type: keyword
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      image_modality:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      sample_types:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
    cypher_query: "
      MATCH (s:study)<--(p:participant)
      WITH s, 
        {
          accesses: s.study_access,
          acl: s.acl,
          phs_accession: s.phs_accession,
          studies: s.study_name,
          study_data_types: s.study_data_types,
          number_of_study_participants: count(distinct p)
        } AS opensearch_data
      OPTIONAL MATCH (s)<--(:participant)<--(samp:sample)
      WITH s, \"Not specified in data\" AS na,
        apoc.map.merge(opensearch_data, {
          number_of_study_samples: count(distinct samp)
        }) AS opensearch_data
      MATCH (s)<--(f:file)
      UNWIND coalesce(apoc.text.split(f.experimental_strategy_and_data_subtypes,\"[;,]\\s{0,1}\"), na) AS experimental_strategies
      WITH f, na, opensearch_data, experimental_strategies, CASE WHEN f.file_type = na THEN na ELSE toUpper(f.file_type) END AS file_type 
      WITH f, na,
        apoc.map.merge(opensearch_data, {
          experimental_strategies: experimental_strategies,
          file_types: file_type ,
          files: f.file_id,
          file_id: f.file_id,
          file_name: f.file_name,
          file_type: file_type,
          file_size: f.file_size,
          md5sum: f.md5sum
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(:sample)-->(p:participant)
      WITH f, na, opensearch_data, 
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(p.gender, na))) AS gender,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(p.participant_id, na))) AS participant_id
      WITH f, na,
        apoc.map.merge(opensearch_data, {
          genders: gender,
          subject_ids: participant_id
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(samp:sample)
      WITH f, na, opensearch_data,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_tumor_status, na))) AS sample_tumor_status,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_type, na))) AS sample_type,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_id, na))) AS sample_id
      WITH f, na,
        apoc.map.merge(opensearch_data, {
          is_tumor: sample_tumor_status,
          analyte_type: sample_type,
          sample_types: sample_type,
          sample_ids: sample_id
        }) AS opensearch_data
      OPTIONAL MATCH (f)<--(g:genomic_info)
      WITH f, na,
        apoc.map.merge(opensearch_data, {
          library_layouts: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_layout, na))), 
          library_selections: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_selection, na))), 
          library_sources: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_source, na))), 
          library_strategies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_strategy, na))),
          instrument_models: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.instrument_model, na))),
          platforms: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.platform, na))),
          reference_genome_assemblies: apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.reference_genome_assembly, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(:sample)-->(:participant)<--(diag:diagnosis)
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          primary_diagnoses: apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_diagnosis, na))),
          site: apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_site, na)))
        }) AS opensearch_data
      OPTIONAL MATCH (f)<--(i:image)
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          image_modality: apoc.coll.sort(COLLECT(DISTINCT COALESCE(i.image_modality, na)))
        }) AS opensearch_data
      RETURN opensearch_data
      ORDER BY opensearch_data.files
    "
# Files index
  - index_name: files
    type: neo4j
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      image_modality:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      sample_types:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Overview properties
      analyte_type:
        type: keyword
      analyte_type_sort:
        type: keyword
      file_id:
        type: keyword
      file_ids:
        type: keyword
      file_name:
        type: keyword
      file_names:
        type: keyword
      file_type:
        type: keyword
      file_size:
        type: long
      image_modality:
        type: keyword
      md5sum:
        type: keyword
      sample_id:
        type: keyword
      sample_ids:
        type: keyword
      subject_ids:
        type: keyword
      # Global search properties
      file_id_gs:
        type: search_as_you_type
      file_name_gs:
        type: search_as_you_type
      file_type_gs:
        type: search_as_you_type
      subject_id_gs:
        type: search_as_you_type
      sample_id_gs:
        type: search_as_you_type
      accesses_gs:
        type: search_as_you_type
      acl_gs:
        type: search_as_you_type
      experimental_strategies_gs:
        type: search_as_you_type
      instrument_models_gs:
        type: search_as_you_type
      library_layouts_gs:
        type: search_as_you_type
      library_selections_gs:
        type: search_as_you_type
      library_sources_gs:
        type: search_as_you_type
      library_strategies_gs:
        type: search_as_you_type
      platforms_gs:
        type: search_as_you_type
      reference_genome_assemblies_gs:
        type: search_as_you_type
      sites_gs:
        type: search_as_you_type
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)<--(p:participant)
      WITH s, 
        {
          accesses: s.study_access,
          acl: s.acl,
          phs_accession: s.phs_accession,
          studies: s.study_name,
          study_data_types: s.study_data_types,
          number_of_study_participants: count(distinct p),
          accesses_gs: s.study_access,
          acl_gs: s.acl
        } AS opensearch_data
      OPTIONAL MATCH (s)<--(:participant)<--(samp:sample)
      WITH s, 
        apoc.map.merge(opensearch_data, {
          number_of_study_samples: count(distinct samp)
        }) AS opensearch_data
      MATCH (s)<--(f:file)
      WITH f, \"Not specified in data\" AS na, opensearch_data
      WITH f, na, opensearch_data,
        CASE WHEN f.file_type = na THEN na ELSE toUpper(f.file_type) END AS file_type, 
        apoc.coll.sort(apoc.coll.toSet(apoc.coll.flatten(COLLECT(coalesce(apoc.text.split(f.experimental_strategy_and_data_subtypes,\"[;,]\\s{0,1}\"), na)),true))) AS experimental_strategy_and_data_subtypes
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          experimental_strategies: experimental_strategy_and_data_subtypes,
          file_types: file_type ,
          files: f.file_id,
          file_id: f.file_id,
          file_ids: f.file_id,
          file_name: f.file_name,
          file_names: f.file_name,
          file_type: file_type,
          file_size: f.file_size,
          md5sum: f.md5sum,
          experimental_strategies_gs: experimental_strategy_and_data_subtypes,
          file_type_gs: f.file_type ,
          file_id_gs: f.file_id,
          file_name_gs: f.file_name
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(:sample)-->(p:participant)
      WITH f, na, opensearch_data,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(p.gender, na))) AS gender,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(p.participant_id, na))) AS participant_id
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          genders: gender,
          subject_ids: participant_id,
          subject_id_gs: participant_id
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(samp:sample)
      WITH f, na, opensearch_data, 
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_tumor_status, na))) AS sample_tumor_status,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_type, na))) AS sample_type,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(samp.sample_id, na))) AS sample_id
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          is_tumor: sample_tumor_status,
          sample_types: sample_type,
          analyte_type: sample_type,
          analyte_type_sort: apoc.text.join(sample_type, ''),
          sample_id: sample_id,
          sample_ids: sample_id,
          sample_id_gs: sample_id
        }) AS opensearch_data
      OPTIONAL MATCH (f)<--(g:genomic_info)
      WITH f, na, opensearch_data, 
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_layout, na))) AS library_layout,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_selection, na))) AS library_selection,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_source, na))) AS library_source,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.library_strategy, na))) AS library_strategy,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.instrument_model, na))) AS instrument_model,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.platform, na))) AS platform,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(g.reference_genome_assembly, na))) AS reference_genome_assembly
      WITH f, na,
        apoc.map.merge(opensearch_data, {
          library_layouts: library_layout, 
          library_selections: library_selection, 
          library_sources: library_source, 
          library_strategies: library_strategy,
          instrument_models: instrument_model,
          platforms: platform,
          reference_genome_assemblies: reference_genome_assembly,
          library_layouts_gs: library_layout, 
          library_selections_gs: library_selection, 
          library_sources_gs: library_source, 
          library_strategies_gs: library_strategy,
          instrument_models_gs: instrument_model,
          platforms_gs: platform,
          reference_genome_assemblies_gs: reference_genome_assembly
        }) AS opensearch_data
      OPTIONAL MATCH (f)-->(:sample)-->(:participant)<--(diag:diagnosis)
      WITH f, na, opensearch_data,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_diagnosis, na))) AS primary_diagnosis,
        apoc.coll.sort(COLLECT(DISTINCT COALESCE(diag.primary_site, na))) AS primary_site
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          primary_diagnoses: primary_diagnosis,
          site: primary_site,
          sites_gs: primary_site
        }) AS opensearch_data
      OPTIONAL MATCH (f)<--(i:image)
      WITH f, na, 
        apoc.map.merge(opensearch_data, {
          image_modality: apoc.coll.sort(COLLECT(DISTINCT COALESCE(i.image_modality, na)))
        }) AS opensearch_data
      RETURN opensearch_data
      ORDER BY opensearch_data.files
    "
# Programs index
  - index_name: programs
    type: neo4j
    # type mapping for each property of the index
    mapping:
      program_name:
        type: search_as_you_type
      program_short_description:
        type: search_as_you_type
      program_full_description:
        type: search_as_you_type
      program_external_url:
        type: search_as_you_type
      program_sort_order:
        type: search_as_you_type
      program_sort_order_kw:
        type: keyword
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (p:program)
      WITH p, \"program\" as type
      RETURN
        p.program_name AS program_name,
        p.program_short_description AS program_short_description,
        p.program_full_description AS program_full_description,
        p.program_external_url AS program_external_url,
        p.program_sort_order AS program_sort_order,
        p.program_sort_order AS program_sort_order_kw,
        type
    "
# Studies index
  - index_name: studies
    type: neo4j
    # type mapping for each property of the index
    mapping:
      study_code:
        type: keyword
      phs_accession:
        type: keyword
      study_data_types:
        type: keyword
      acl:
        type: keyword
      study_code_gs:
        type: search_as_you_type
      phs_accession_gs:
        type: search_as_you_type
      study_name_gs:
        type: search_as_you_type
      study_data_types_gs:
        type: search_as_you_type


    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)
      WITH s, {
        study_code: s.study_name,
        study_code_gs: s.study_name,
        phs_accession_gs: s.phs_accession,
        phs_accession: s.phs_accession,
        study_name: s.study_name,
        study_name_gs: s.study_name,
        study_data_types: s.study_data_types,
        study_data_types_gs: s.study_data_types,
        acl: s.acl
      } AS opensearch_data
      OPTIONAL MATCH (s)<--(p:participant)
      WITH s, 
        apoc.map.merge(opensearch_data, {
          number_of_participants: COUNT(DISTINCT p)
        }) AS opensearch_data
      OPTIONAL MATCH (s)<--(:participant)<--(samp:sample)
      WITH s, 
        apoc.map.merge(opensearch_data, {
          number_of_samples: COUNT(DISTINCT samp)
        }) AS opensearch_data
      RETURN opensearch_data
      ORDER BY opensearch_data.study_code
    "
# Subject IDs index
  - index_name: subject_ids
    type: neo4j
    # type mapping for each property of the index
    mapping:
      phs_accession:
        type: keyword
      subject_id:
        type: keyword
      # subject_ids must be converted into lower case
      subject_ids:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (p:participant)-->(s:study)
      RETURN
        s.phs_accession AS phs_accession,
        p.participant_id AS subject_id,
        toLower(p.participant_id) AS subject_ids
    "
# About Page index
  - index_name: about_page
    type: about_file
    # type mapping for each property of the index
    mapping:
      page:
        type: search_as_you_type
      title:
        type: search_as_you_type
      primaryContentImage:
        type: text
      content:
        type: object
# Model nodes index
  - index_name: model_nodes
    type: model
    subtype: node
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      node_kw:
        type: keyword
# Model properties index
  - index_name: model_properties
    type: model
    subtype: property
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_kw:
        type: keyword
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type
# Model values index
  - index_name: model_values
    type: model
    subtype: value
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type
      value:
        type: search_as_you_type
      value_kw:
        type: keyword
